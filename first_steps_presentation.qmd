---
title: "First Steps with Python"
author: "Matt Steele"
format: 
  revealjs:
    theme: white
    transition: slide
editor: visual
execute: 
  eval: false
---

## Welcome

-   [Matt Steele](https://directory.lib.wvu.edu/employee/210/)
-   [Data Cleaning and Analysis with Python](https://wvu.libcal.com/event/12979455)
-   [Data Visualization and Presentation with Python](https://wvu.libcal.com/event/12979521)
-   [Date Services Workshops](https://wvu.libcal.com/calendar/researchcommons?cid=9552&t=g&d=0000-00-00&cal=9552&ct=59746&inc=0)

## Resources

-   [Official Site for Python](https://www.python.org/)

-   [Official Site for Anaconda](https://www.anaconda.com/)

-   [Jupyter Notebooks](https://jupyter.org/)

-   [O'Reilly Learning Platform](https://databases.lib.wvu.edu/connect/1540334373)

    -   Python for Data Analysis, 3rd Edition

    -   Python for Data Analysis: Step-By-Step with Projects

## Why Python

-   Open-source

    -   Rich Ecosystem of Libraries

    -   Integration with Other Tools and Languages

    -   Platform Independent and Non-proprietary

    -   Reproducibility and Transparency

    -   Integrates into Proprietary Software

    -   Share-able

    -   Add-on Libraries

## Anaconda Navigator

<https://www.anaconda.com/>

Anaconda is a popular and powerful distribution of Python and R programming languages specifically tailored for data science, machine learning, and scientific computing.

------------------------------------------------------------------------

## What is JupyterLab?

<https://jupyter.org/>

-   JupyterLab is an interactive development environment for notebooks, code, and data.
-   It offers an enhanced interface for working with Jupyter Notebooks, terminals, text editors, and file browsers all in one place.

## Opening JupyterLab through Anaconda Navigator

1.  **Open Anaconda Navigator**
    -   Follow the steps above to launch Anaconda Navigator.
2.  **Open JupyterLab**
    -   Click on **JupyterLab** within Anaconda Navigator to open it.

## Set up your Environment

3.  **Select Your Working Directory**
    -   Use the directory navigator on the right to select the folder you will be working in.
4.  **Start a New Notebook**
    -   Click on **File** \> **New Notebook** \> **Python 3** to start a new Python notebook.
5.  **Select the Python Kernel**
    -   Ensure that the Python kernel is selected. You can check this in the top-right corner of the notebook interface.
6.  **Save Your Notebook**
    -   Click on **File** \> **Save Notebook As** to give your notebook a name and save it.
7.  **Save the Current Workspace**
    -   Click on **File** \> **Save Current Workspace As** to save your workspace settings.

------------------------------------------------------------------------

## Setting Your Preferences in JupyterLab

1.  **Theme Customization**
    -   Go to **Settings** \> **JupyterLab Theme** to switch between light or dark modes.
2.  **Tab and Layout Preferences**
    -   Adjust how files and notebooks open (e.g., side-by-side or in tabs) under **Settings** \> **Layout Mode**.
3.  **Editor Settings**
    -   Modify editor settings such as line numbers, tab size, and indentation in **Settings** \> **Text Editor Settings**.
4.  **Auto-Save**
    -   Enable or disable auto-saving your notebooks and set the interval under **Settings** \> **Autosave Interval**.
5.  **Shortcuts**
    -   Customize keyboard shortcuts for running cells, switching windows, or opening the terminal under **Settings** \> **Advanced Settings Editor** \> **Keyboard Shortcuts**.

## Cells

Unit where you can write and run code, document their work, and format outputs.

There are three main types of cells:

1.  **Code Cells** -- For writing and running Python code.
2.  **Markdown Cells** -- For writing formatted text (like headings, lists, links).
3.  **Raw Cells** -- For displaying unformatted text or data.

## Entering Data

In Python, you can work with data by defining variables, lists, or other data structures. Let's start by entering some data and practicing basic operations.

## Lists

Lists are used to store multiple items in a single variable. Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

```{python}
#| label: enter list
#|eval: false

my_var = [1, 2, 3, 4]
print(my_var)

```

## Functions

used to give commands to perform a tasks.

<img src="toolbox.png" alt="toolbox" width="25%"/>

<br>

```{python}
#| label: example function
#| eval: false
#| echo: true

round(3.141592653589793)

```

## Arguments

used to provide the details about how your function operates

<img src="pizza.png" alt="pizza" width="55%"/>

<br>

```{python}
#| label: example arguments
#| eval: false
#| echo: true

round(3.141592653589793, 5)

```

::: notes
arguments in python as the ingredients or details you provide to a function, like telling a chef how to prepare your food. These arguments help customize what the function does, and the function's output is like the dish you receive based on your requests.
:::

## Documentation

provides the necessary information, explanations, examples, and guidance to help you learn, understand, and effectively use R functions and packages.

<br>

-   [Base Python Standard Library](https://docs.python.org/3/library/index.html)
-   [Pandas Documentation](https://pandas.pydata.org/docs/)
-   [NumPy Documentation](https://numpy.org/doc/stable/)

## Getting Help in Python

1.  **Help with Functions and Libraries**
    -   Use the `help()` function to get information about a function or library.

```{python}
#| label: help
#| eval: false

 help(print)  # Get help on the print function
   help('pandas')  # Get help on the pandas library

```

## Variables

used to store and work on data (numbers, words, tables, and more).

<img src="drawer.png" alt="drawer" width="55%"/>

::: notes
"object" is a fundamental concept that can be thought of as a container or a holder for data. Just like in everyday life, you use different containers like bags, boxes, or drawers to store and organize your things
:::

## Creating and Using Variables

### Example 1: Storing Numbers

```{python}
#| label: variable example
#| eval: false

# Storing an integer
age = 25

# Storing a floating-point number in Fahrenheit
temperature_fahrenheit = 100.6

# Converting Fahrenheit to Celsius
temperature_celsius = (temperature_fahrenheit - 32) * 5 / 9


print(age)
print(temperature_celsius) 


```

## Naming Objects

-   Use descriptive and meaningful names that indicate the purpose of the object
-   Use lowercase letters.
-   Use underscores to separate words (e.g., my_variable_name).
-   Avoid using reserved words or functions (e.g., "if," "else," "for," "function").

## Data Types in Python

::: r-fit-text
<br />

| Type           | Description                                                                                            |
|---------------|---------------------------------------------------------|
| **Integer**    | Represents whole numbers. Example: `5`, `-3`, `42`.                                                    |
| **Float**      | Represents real numbers (numbers with decimal points). Example: `3.14`, `-0.001`.                      |
| **String**     | Represents text, words, and strings of characters. Enclosed in double (`"`) or single (`'`) quotes.    |
| **List**       | Represents a collection of items, which can be of different types. Example: `[1, 2, 3]`, `['a', 'b']`. |
| **Tuple**      | Represents an immutable collection of items. Example: `(1, 2, 3)`, `('a', 'b')`.                       |
| **Dictionary** | Represents a collection of key-value pairs. Example: `{'key1': 'value1', 'key2': 'value2'}`.           |
| **Boolean**    | Represents binary values used for decision-making. Typically `True` or `False`.                        |
| **Date**       | Handles dates and times. Use the `datetime` module. Example: `datetime.date(2024, 9, 13)`.             |
:::

## Packages & Libraries

 packages are like toolkits or collections of pre-built functions, data sets, and tools that extend the capabilities of the R programming language.

## Packages

<br>

#### Install

You must install a package before you can load it. *But you only need to install it one time.*

```{python}
#| label: install packages
#| eval: false
#| echo: true

!conda install pandas

!conda list

```

<br>

## Explore your Environment

```{python}
#| label: environment
#| eval: false

# see

!conda list

# search

!conda search beautifulsoup

# update

!conda update beautifulsoup4

```


#### Import

Using import for a library will bring all functions for the library into your workspace

```{python}
#| label: import
#| eval: false
#| echo: true

import pandas as pd

# Example: Reading a CSV file with pandas
# Assume we have a 'data.csv' file
data = pd.read_csv("customer_reviews.csv")

# Display the first 5 rows of the data
print(data.head())   # Output: 3.141592653589793

```

## Vectors

ordered collections of data items of the same type.

<img src="row.png" alt="table row" width="55%"/>

<br>

```{r}
#| label: example vectors
#| eval: false
#| echo: true

vec_one <- c(1,2,3)
vec_two <- c(4:6)

vec_two

```

## Data Frame

two-dimensional sequence of data variables (columns) and observations (rows). While each variable in a data frame typically contains data of the same type, different variable can contain different data types.

<br>

```{r}
#| label: create data frame
#| eval: false
#| echo: true

# create vectors
title <- c("Star Wars", "The Empire Strikes Back", "Return of the Jedi")
year <- c(1977, 1980, 1983)
length.min <- c(121, 124, 133)
box.office.mil <- c(787, 534, 572)
  
# combine these vectors with the data.frame() function

  starWars.data <- data.frame(title, year, length.min, box.office.mil)
  starWars.data

```

## Subsetting Variables

used to select and work with specific variables (columns) from a data frame.

<br>

```{r}
#| label: subsetting
#| eval: false
#| echo: true

starWars.data$year
```

## Export / Save Data

Once you are done entering your data, you can export it to your working directory. The function without built-in arguments is **write.table( )** but if are saving it as a csv, you are better using **write.csv( )**.

<br>

```{r}
#| label: export files
#| eval: false
#| echo: true

write.csv(starWars.data, "starwars.csv")
```

## Load Data

load data from a file in your working directory using the **read_csv()** function from tidyverse. There is also the **read.csv( )** function in base R.

<br>

```{r}
#| label: read data
#| eval: false
#| echo: true

fight_songs <- read_csv("fight-songs.csv")

```

## Explore Data

<br>

```{r}
#| label: explore
#| eval: false
#| echo: true

view(fight_songs) # view in a new tab

nrow(fight_songs) # number of rows

ncol(fight_songs) # number of columns

str(fight_songs) # structure of data frame

```

## Descriptive Statistics

<br>

```{r}
#| label: descriptive statistics
#| eval: false
#| echo: true


summary(fight_songs) # various descriptive statistics

sum(fight_songs$number_fights) # sum a variable

mean(fight_songs$number_fights) # average a variable

median(fight_songs$number_fights) # middle value of a variable

sd(fight_songs$number_fights) # standard deviation of a variable

min(fight_songs$number_fights) # minimum value of a variable

max(fight_songs$number_fights) # maximum value of a variable

```

## Conclusion

-   [Matt Steele](https://directory.lib.wvu.edu/employee/210/)
-   [Data Cleaning and Analysis with R and RStudio](https://wvu.libcal.com/event/12978849)
-   [Data Visualization and Presentation with R and RStudio](https://wvu.libcal.com/event/12978954)
-   [Date Services Workshops](https://wvu.libcal.com/calendar/researchcommons?cid=9552&t=g&d=0000-00-00&cal=9552&ct=59746&inc=0)
